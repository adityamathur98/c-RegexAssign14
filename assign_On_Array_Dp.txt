Q1. Generate a Fibonacci series up to `n` elements and store it in an array.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void generateFibonacci(int n)
{
    int arr[n];
    arr[0] = 0;
    arr[1] = 1;

    for (int i = 0; i < n; i++)
    {
        if (n <= 1)
        {
            cout << n;
            break;
        }
        if (i == 0)
            continue;
        if (i == 1)
            continue;
        arr[i] = arr[i - 2] + arr[i - 1];
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter The Number of  Element: ";
    cin >> n;
    generateFibonacci(n);
    return 0;
}

Q2. Create an array with the first `n` even numbers in ascending order.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printEvenNumber(int n)
{
    int arr[n];

    int count = 1;

    for (int i = 0; i < n; i++)
    {
        while (!(count % 2 == 0))
        {
            count++;
        }
        arr[i] = count;
        count++;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter The Number of Even Number: ";
    cin >> n;

    printEvenNumber(n);
    return 0;
}

Q3. Generate an array containing the first `n` prime numbers.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

int isPrime(int count)
{
    if (count <= 3)
    {
        return true;
    }

    if (count % 2 == 0 || count % 3 == 0)
    {
        return false;
    }

    for (int i = 5; i * i <= count; i++)
    {
        if (count % i == 0)
        {
            return false;
        }
    }

    return true;
}

void printPrimeNumber(int n)
{
    int arr[n];
    int count = 1;

    for (int i = 0; i < n; i++)
    {
        if (n == 1)
        {
            arr[i] = 1;
            break;
        }
        if (n == 2)
        {
            arr[i] = 1;
            arr[i + 1] = 2;
            break;
        }
        else
        {
            while (!isPrime(count))
            {
                count++;
            }
            arr[i] = count;
            count++;
        }
    }
    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter The Number of Prime Number: ";
    cin >> n;

    printPrimeNumber(n);
    return 0;
}

Q4. Store the first `n` terms of an arithmetic progression (AP) with a given common difference `d` in an array.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int difference = 3;
    int arr[n];

    for (int i = 0; i < n; i++)
    {
        if (i == 0)
        {
            arr[i] = 0;
        }
        else
        {
            arr[i] = arr[i - 1] + 3;
        }
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number for Term for Common Difference Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q5. Create an array containing the first `n` terms of a geometric progression (GP) with a given ratio `r`.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    int ratio = 3;

    for (int i = 0; i < n; i++)
    {
        if (i == 0)
        {
            arr[i] = 2;
        }
        else
        {
            arr[i] = arr[i - 1] * ratio;
        }
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number for Term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q6. Populate an array with the squares of the first `n` natural numbers.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];

    for (int i = 1; i <= n; i++)
    {
        arr[i - 1] = pow(i, 2);
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number for Term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q7. Store the first `n` cube numbers in an array.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];

    for (int i = 1; i <= n; i++)
    {
        arr[i - 1] = pow(i, 3);
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number for Term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q8. Create an array that contains the first `n` Fibonacci numbers, but only the even ones.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

bool isPrev3Even(int num)
{
    if (num % 2 == 0)
    {
        return true;
    }
    return false;
}

void printSquence(int n)
{
    int arr[n];
    int prev1 = 0, prev2 = 1, prev3;

    for (int i = 0; i < n; i++)
    {
        prev3 = prev1 + prev2;

        while (!isPrev3Even(prev3))
        {
            prev3 = prev1 + prev2;
            prev1 = prev2;
            prev2 = prev3;
        }
        arr[i] = prev3;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number for Term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q9. Fill an array with the first `n` terms of the sequence where each term is `a[i] = i^2 + 2`.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = pow(i, 2) + 2;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q10. Store in an array the sequence where each term is the sum of the previous two numbers, but starting with 3 and 7.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    arr[0] = 3;
    arr[1] = 7;
    for (int i = 2; i < n; i++)
    {
        if (n <= 1)
        {
            cout << n;
            break;
        }
        arr[i] = arr[i - 2] + arr[i - 1];
    }

    printArray(arr, n);
}

int main()
{ 
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q11. SCreate an array where the first `n` elements alternate between positive and negative integers, starting from `1, -1, 2, -2, ...`.
    int n;

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n], prev1 = 1;
    for (int i = 0; i < n; i++)
    {
        if (i == 0 || i % 2 == 0)
        {
            arr[i] = prev1;
        }
        else
        {
            arr[i] = -prev1;
            prev1++;
        }
    }

    printArray(arr, n);
}

int main()
{
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}
Q12. Generate an array with the first `n` terms of the sequence where each term is the factorial of the index (`a[i] = i!`).

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

int getFactorial(int n)
{
    int product = 1;
    if (n <= 0)
    {
        return n;
    }
    while (n > 0)
    {
        product *= n;
        n--;
    }
    return product;
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        int factorial = getFactorial(i);
        arr[i] = factorial;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q13. Create an array containing the first `n` terms of the sequence where each element is the sum of the digits of the index.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

int getSum(int n)
{
    int sum = 0;
    if (n >= 0 && n <= 9)
    {
        return n;
    }

    for (int i = n; i > 0; i /= 10)
    {
        int lastDigit = i % 10;
        sum += lastDigit;
    }

    return sum;
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        int sumOfIndex = getSum(i);
        arr[i] = sumOfIndex;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q14. // Generate an array where each element is the difference between the square of the index and the previous square (`a[i] = i^2 - (i-1)^2`).

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        if (i == 0)
        {
            arr[i] = 0;
        }
        else
            arr[i] = pow(i, 2) - pow(i - 1, 2);
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q15. Fill an array with the first `n` elements of the sequence where each term is `a[i] = i * (i+1)`.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = i * (i + 1);
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q16. Populate an array with the first `n` terms of a sequence where each term is a power of 2 (i.e., `a[i] = 2^i`).

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        int powerOf2 = pow(2, i);
        arr[i] = powerOf2;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q17. Store the first `n` terms of a sequence where each element is the cumulative sum of the previous elements

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];

    int sum = 0;

    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << " Of Array : ";
        cin >> arr[i];
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = i; j <= i; j++)
        {
            sum += arr[j];
        }
        arr[i] = sum;
    }

    printArray(arr, n);
}

int main()
{
    // (`a[i] = a[0] + a[1] + ... + a[i-1]`).
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q18. Create an array where the first `n` terms follow the pattern `1, 1, 2, 3, 5, 8,...` (a variant of Fibonacci where the first two terms
    are 1).

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];

    for (int i = 0; i < n; i++)
    {
        if (i <= 1)
        {
            arr[i] = 1;
        }
        else
        {
            arr[i] = arr[i - 2] + arr[i - 1];
        }
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q19. Generate an array with the first `n` terms of a sequence where each term is the square of the sum of the digits of the index.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

int getSum(int n)
{
    int sum = 0;
    if (n >= 0 && n <= 9)
    {
        return n;
    }

    for (int i = n; i > 0; i /= 10)
    {
        int lastDigit = i % 10;
        sum += lastDigit;
    }

    return pow(sum, 2);
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        int sumOfIndex = getSum(i);
        arr[i] = sumOfIndex;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}

Q20. Create an array that contains the first `n` triangular numbers, where the `i`th triangular number is `a[i] = i * (i+1) / 2`.

Ans. #include <bits/stdc++.h>
using namespace std;

void printArray(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

void printSquence(int n)
{
    int arr[n];
    for (int i = 0; i < n; i++)
    {
        arr[i] = i * (i + 1) / 2;
    }

    printArray(arr, n);
}

int main()
{
    int n;
    cout << "Enter Number of term for Squence: ";
    cin >> n;

    printSquence(n);
    return 0;
}